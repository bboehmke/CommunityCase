<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="transparent" default="all" basedir=".">

   <property file="version.txt"/>
   <property file="build.properties"/>

   <!-- Target aurora by default -->
   <property name="idea.target.aurora" value="true"/>
<!--   <property name="idea.target.ariadna" value="true"/>-->

   <!-- Set the IDEA Aurora EAP installation directory here -->
   <property name="dir.aurora" location="c:/java/IntelliJ"/>

   <!-- Set the IDEA Ariadna 3.0 installation directory here -->
   <property name="dir.ariadna" location="c:/java/IntelliJ695"/>

   <property name="browser" location="C:/Program Files/Internet Explorer/IEXPLORE.EXE"/>

   <property name="jsr14.home" value="c:/java/adding_generics-2_0-ea"/>

   <!-- Plugin util project path -->
   <property name="dir.plugin.util" location="../PluginUtil"/>

   <!-- Plugin test project path (for invitro tests) -->
   <property name="dir.plugin.test" location="../TransparentTest"/>

   <!-- Project name and version info -->
   <property name="project.name" value="${ant.project.name}"/>
   <property name="plugin.vendor" value="${user.name}"/>
   <property name="plugin.description" value=""/>
   <property name="plugin.idea.version.min" value="4.0"/>
   <property name="plugin.idea.version.max" value="4.5"/>
   <property name="plugin.doc.url" value="http://www.intellij.org/twiki/bin/view/Main/${plugin.wiki.name}"/>
   <property name="plugin.bin.url" value="http://www.intellij.org/twiki/pub/Main/${plugin.wiki.name}/${project.name}.zip"/>
   <property name="plugin.src.url" value="http://www.intellij.org/twiki/pub/Main/${plugin.wiki.name}/${project.name}-src.zip"/>

   <!-- Source directories -->
   <property name="dir.src" location="${basedir}/src"/>
   <property name="dir.ariadna.src" value="${basedir}/src-ariadna"/>
   <property name="dir.aurora.src" value="${basedir}/src-aurora"/>

   <property name="dir.plugin.util.src" location="${dir.plugin.util}/src"/>
   <property name="dir.plugin.test.src" location="${dir.plugin.test}/src"/>

   <!-- Destination directories -->
   <property name="dir.build" location="${basedir}/build"/>
   <property name="dir.build.classes" location="${dir.build}/classes"/>
   <property name="dir.build.dist" location="${dir.build}/dist"/>
   <property name="dir.build.docs" location="${dir.build}/docs"/>
   <property name="dir.build.preprocess" location="${dir.build}/preprocess"/>
   <property name="dir.build.test.results" location="${dir.build}/test-results"/>
   <property name="dir.lib" location="lib"/>

   <!-- Compiler settings -->
   <property name="compile.debug" value="on"/>

   <!-- Class paths -->
   <path id="plugin.classpath">
      <fileset dir="${jsr14.home}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${dir.lib}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${dir.plugin.util}/lib">
         <include name="*.jar"/>
      </fileset>
   </path>
   <path id="aurora.classpath">
      <path refid="plugin.classpath"/>
      <fileset dir="${dir.aurora}/lib">
         <include name="*.jar"/>
      </fileset>
   </path>
   <path id="ariadna.classpath">
      <path refid="plugin.classpath"/>
      <fileset dir="${dir.ariadna}/lib">
         <include name="*.jar"/>
      </fileset>
   </path>

<!--   <property name="idea.target.ariadna" value=""/>-->

   <target name="initIdeaAurora" unless="idea.target.ariadna">
      <echo message="===== Build for Aurora ====="/>
      <property name="dir.idea" location="${dir.aurora}"/>
      <property name="dir.idea.test" location="${dir.aurora.test}"/>
      <property name="aurora.var" value="true"/>
      <property name="idea.version" value="aurora"/>
      <path id="compile.classpath">
         <path refid="aurora.classpath"/>
      </path>
      <property name="dir.additional.src" value="${dir.aurora.src}"  />
   </target>

   <target name="initIdeaAriadna" unless="idea.target.aurora">
      <echo message="===== Build for  Ariadna ====="/>
      <property name="dir.idea" location="${dir.ariadna}"/>
      <property name="dir.idea.test" location="${dir.ariadna.test}"/>
      <property name="aurora.var" value="false"/>
      <property name="idea.version" value="idea3.0"/>
      <path id="compile.classpath">
         <path refid="ariadna.classpath"/>
      </path>
      <property name="dir.additional.src" value="${dir.ariadna.src}"  />
   </target>

   <!-- Set IDEA related paths -->
   <target name="initIdeaDir" depends="initIdeaAriadna, initIdeaAurora">
      <echo message="dir.idea=${dir.idea}"/>
      <property name="plugin.name" value="${ant.project.name}"/>
      <property name="project.name" value="${ant.project.name}-${idea.version}"/>
      <property name="dir.idea.lib" location="${dir.idea}/lib"/>
      <property name="dir.idea.plugins" location="${dir.idea}/plugins"/>
      <property name="dir.idea.plugin" location="${dir.idea.plugins}/${project.name}/lib"/>
      <property name="plugin.jar.name" value="${project.name}.jar"/>
      <property name="plugin.jar" value="${dir.build.dist}/${plugin.jar.name}"/>
   </target>

   <!-- Creates directories -->
   <target name="init" depends="initIdeaDir">
      <tstamp/>
      <tstamp>
         <format property="year" pattern="yyyy"/>
      </tstamp>
      <tstamp>
         <format property="month" pattern="MM"/>
      </tstamp>
      <tstamp>
         <format property="day" pattern="dd"/>
      </tstamp>
      <tstamp>
         <format property="build.time" pattern="MM/dd/yyyy hh:mm aa"/>
      </tstamp>
      <mkdir dir="${dir.build.classes}"/>
      <mkdir dir="${dir.build.dist}"/>
      <mkdir dir="${dir.build.docs}"/>
      <mkdir dir="${dir.build.test.results}"/>
      <mkdir dir="${dir.ariadna.src}"/>
      <mkdir dir="${dir.aurora.src}"/>
      <!--     <mkdir dir="C:\Dev\IDEAPlugins\JUnitTestPlugin\build\test-results"/>-->
      <available property="version.exists" file="version.txt"/>
      <antcall target="initVersion"/>
   </target>

   <target name="initVersion" unless="version.exists">
      <antcall target="nextBuild"/>
   </target>

   <target name="setVersion" depends="init">
      <property name="plugin.version" value="${major.number}.${minor.number} build ${build.number} at ${build.time}"/>
   </target>

   <!-- Clean up  -->
   <target name="clean" depends="initIdeaDir" description="Deletes the build directory.">
      <delete dir="${dir.build}"/>
      <antcall target="init"/>
   </target>


   <!-- Compile, Build jar and javadoc -->
   <target name="all" depends="init, clean, deploy"
      description="Compiles, builds jar file and javadoc."/>

   <!-- Preprocess sources to the target version of IDEA -->
   <target name="preprocessSource" depends="init"
      description="Preprocess sources for a particular version of IDEA. Change the property target.idea.aurora to true/false to target aurora/ariadna">
       <antcall target="preprocess" inheritRefs="true">
              <param name="dir.to.preprocess" value="${dir.src}"/>
          </antcall>
       <antcall target="preprocess" inheritRefs="true">
              <param name="dir.to.preprocess" value="${dir.plugin.util.src}"/>
          </antcall>
         </target>

    <target name="preprocess">
        <delete dir="${dir.build.preprocess}"/>
        <copy todir="${dir.build.preprocess}" overwrite="true">
           <fileset dir="${dir.to.preprocess}" includes="**/*.java">
              <contains text="/*@if" casesensitive="no"/>
           </fileset>
           <filterchain>
              <filterreader classname="org.intellij.ant.PreprocessorFilterReader">
                 <classpath refid="compile.classpath"/>
                 <param type="define" name="Aurora" value="${aurora.var}"/>
              </filterreader>
           </filterchain>
        </copy>
        <copy todir="${dir.to.preprocess}" overwrite="true">
           <fileset dir="${dir.build.preprocess}"/>
        </copy>
    </target>

   <!-- Compiles only -->
   <target name="compile" depends="resources, versionTag, compile.all" description="Compiles all source files"/>

   <target name="compile.all">
      <javac
         destdir="${dir.build.classes}"
         debug="${compile.debug}"
         srcdir="${dir.plugin.util.src}:${dir.src}:${dir.additional.src}"
         source="1.4"
         excludes="**/MockVcsManager.java, **/MockApplication.java"
         >
<!--         source="1.5"-->
<!--         compiler="com.cortexeb.Jsr14CompilerAdapter"-->
<!--         <src path="${dir.src}"/>-->
<!--         <src path="${dir.additional.src}"/>-->
         <classpath refid="compile.classpath"/>
      </javac>
   </target>

   <target name="resources" depends="init" description="copies resource files to the compilation folder">
      <copy todir="${dir.build.classes}" overwrite="yes" failonerror="yes" filtering="off" includeemptydirs="no">
         <fileset dir="${dir.src}">
            <exclude name="**/*.java"/>
         </fileset>
         <fileset dir="${dir.plugin.util.src}">
            <exclude name="**/*.java"/>
         </fileset>
      </copy>
   </target>

   <target name="versionTag" depends="setVersion" if="dir.version.file">
      <property name="version.file" value="${dir.src}/${dir.version.file}/Version.java"/>
      <filter token="version" value="${plugin.version}"/>
      <copy file="${version.file}tmpl" tofile="${version.file}" filtering="on" overwrite="true"/>
   </target>

   
   <!-- Unit tests -->
   <target name="test" depends="compile" description="Unit tests">
      <junit fork="yes" printsummary="withOutAndErr" haltonfailure="true" haltonerror="true" showoutput="true">
         <classpath>
            <pathelement location="${dir.build.classes}"/>
            <path refid="compile.classpath"/>
         </classpath>

<!--         <jvmarg value="-Xbootclasspath/p:${jsr14.home}/gjc-rt.jar -bootclasspath ${jsr14.home}/collect.jar"/> -->
         <jvmarg value="-Xbootclasspath/p:${jsr14.home}/gjc-rt.jar"/>

         <batchtest fork="yes" >
            <fileset dir="${dir.build.classes}">
               <exclude name="org/intellij/invitrotest/**/*.class"/>
               <include name="**/AllTests.class"/>
            </fileset>
            <formatter type="plain" usefile="false"/>
         </batchtest>
      </junit>
   </target>

   <!-- In Vitro tests -->
   <target name="testInvitro" depends="init, deploy2Test" description="Run tests inside IDEA (In Vitro)">
      <echo message="executing:${dir.idea.test}/bin/debug.bat"/>
      <exec command="${dir.idea.test}/bin/debug.bat" dir="${dir.idea.test}/bin"/>
   </target>


   <target name="deploy2Test"
      description="Copies the jar file to the plugins directory of the test instance">
      <antcall target="deploy">
         <param name="dir.idea.plugin" value="${dir.idea.test}/plugins/${project.name}/lib/"/>
      </antcall>
   </target>

   <!-- Increment version, release and/or build numbers  -->
   <target name="nextMajorVersion" description="Increment version number">
      <propertyfile file="version.txt">
         <entry key="major.number" type="int" default="0" operation="+" value="1"/>
         <entry key="minor.number" type="int" operation="=" value="1"/>
         <entry key="build.number" type="int" operation="=" value="0"/>
      </propertyfile>
   </target>
   <target name="nextMinorVersion" description="Increment release number">
      <propertyfile file="version.txt">
         <entry key="minor.number" type="int" default="0" operation="+" value="1"/>
         <entry key="build.number" type="int" operation="=" value="0"/>
      </propertyfile>
   </target>
   <target name="nextBuild" description="Increment build number">
      <propertyfile file="version.txt">
         <entry key="build.number" type="int" default="0" operation="+" value="1"/>
      </propertyfile>
   </target>


   <!-- Builds the jar file  -->
   <target name="buildJar" depends="init, test, jar, nextBuild"/>

   <target name="jar" depends="buildPluginXml">
      <mkdir dir="${dir.build.classes}/META-INF"/>
      <manifest file="${dir.build.classes}/META-INF/MANIFEST.MF">
         <!--        <section name="org/intellij/plugins/junit">-->
         <attribute name="Specification-Title" value="${project.name}"/>
         <attribute name="Specification-Version" value="${plugin.version}"/>
         <attribute name="Specification-Vendor" value="${plugin.vendor}"/>
         <attribute name="Implementation-Title" value="${project.name}"/>
         <attribute name="Implementation-Version" value="${plugin.version}"/>
         <attribute name="Implementation-Vendor" value="${plugin.vendor}"/>
         <!--        </section>-->
      </manifest>

      <echo message="dir.build.classes=${dir.build.classes}"/>
      <echo message="plugin.jar=${plugin.jar}"/>
      <jar jarfile="${plugin.jar}"
         manifest="${dir.build.classes}/META-INF/MANIFEST.MF"
         basedir="${dir.build.classes}"
         update="true"
         excludes=".dependency-info,**/test/**"/>
   </target>

   <target name="buildPluginXml" depends="setVersion" description="Create plugin deployment descriptors">

      <!-- Insert version information -->
      <replace dir="${dir.build.classes}" includes="**/*.xml **/*.html">
         <replacefilter token="@PLUGIN.NAME@" value="${project.name}"/>
         <replacefilter token="@PLUGIN.VENDOR@" value="${plugin.vendor}"/>
         <replacefilter token="@PLUGIN.DESCRIPTION@" value="${plugin.description}"/>
         <replacefilter token="@PLUGIN.VERSION@" value="${plugin.version}"/>
         <replacefilter token="@IDEA.VERSION.MIN@" value="${plugin.idea.version.min}"/>
         <replacefilter token="@IDEA.VERSION.MAX@" value="${plugin.idea.version.max}"/>
         <replacefilter token="@PLUGIN.DOCURL@" value="${plugin.doc.url}"/>
         <replacefilter token="@PLUGIN.BINURL@" value="${plugin.bin.url}"/>
         <replacefilter token="@PLUGIN.SRCURL@" value="${plugin.src.url}"/>
         <replacefilter token="@PLUGIN.MODIFIED.YEAR@" value="${year}"/>
         <replacefilter token="@PLUGIN.MODIFIED.MONTH@" value="${month}"/>
         <replacefilter token="@PLUGIN.MODIFIED.DAY@" value="${day}"/>
      </replace>
   </target>

   <target name="updateIDEAPluginJar" depends="init, compile" description="Update plugin jar in IDEA plugins dir. Doesn't require to shutdown any instance expect the test one">
      <mkdir dir="${dir.idea.plugin}"/>
      <copy file="${dir.lib}/commons-lang-1.0.jar" todir="${dir.idea.plugin}" failonerror="false"/>
      <antcall target="jar">
         <param name="plugin.jar" value="${dir.idea.plugin}/${plugin.jar.name}"/>
      </antcall>
   </target>

   <target name="deploy" depends="buildJar"
      description="Copies the jar file to the plugins directory of the development instance">
      <copy todir="${dir.idea.plugin}" file="${plugin.jar}"/>
   </target>

   <!-- Builds the javadoc for the project   -->
   <target name="javadoc" depends="init" description="Builds the javadoc">
      <javadoc
         packagenames="idea.*"
         sourcepath="${dir.src}"
         destdir="${dir.build.docs}"
         private="true"
         author="true"
         version="true"
         use="true"
         failonerror="false"
         windowtitle="${project.name} API"
         doctitle="${project.name}">
         <classpath refid="compile.classpath"/>
         <link href="http://java.sun.com/products/jdk/1.4/docs/api"/>
      </javadoc>
   </target>


   <!--Builds a distribution snapshop of the project -->
   <target name="dist" depends="all, nextMinorVersion, distBinary, distSrc" description="Builds a distribution snapshop">
      <copy todir="${dir.build.dist}">
         <fileset file="${dir.build.classes}/META-INF/idea-plugin-registry.xml"/>
      </copy>
   </target>

   <target name="distSrc" depends="init">
      <property name="src.dist.file" value="${dir.build.dist}/${plugin.name}-src.zip"/>
      <delete file="${src.dist.file}"/>

      <basename file="." property="dir.name.plugin"/>
      <basename file="${dir.plugin.util}" property="dir.name.plugin.util"/>
      <basename file="${dir.plugin.test}" property="dir.name.plugin.test"/>

      <zip destfile="${src.dist.file}">
         <zipfileset dir="${basedir}" prefix="${plugin.name}">
            <exclude name="build/**"/>
            <exclude name="native/**"/>
         </zipfileset>
         <zipfileset dir="${dir.plugin.util}" prefix="${dir.name.plugin.util}">
            <exclude name="classes/**"/>
            <exclude name="build/**"/>
         </zipfileset>
         <zipfileset dir="${dir.plugin.test}" prefix="${dir.name.plugin.test}">
            <exclude name="classes/**"/>
            <exclude name="build/**"/>
         </zipfileset>
      </zip>
   </target>

   <target name="distBinary" depends="init">
      <delete file="${dir.build.dist}/${project.name}.zip"/>
      <zip destfile="${dir.build.dist}/${project.name}.zip">
         <zipfileset prefix="${project.name}/lib" dir="${dir.lib}" excludes="easymock.jar, antExtensions.jar,jawin.jar"/>
         <zipfileset prefix="${project.name}/lib" dir="${dir.build.dist}" includes="${plugin.jar.name}"/>
      </zip>
   </target>

   <target name="openPluginWikiPage" description="Open plugin page on wiki">
      <exec executable="${browser}">
         <arg value="${plugin.doc.url}"/>
      </exec>
   </target>

</project>
